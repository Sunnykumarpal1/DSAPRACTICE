 int MAH(vector<int>&ans,int n){
        vector<int>leftsmaller ;
        vector<int>rightsmaller ;
        stack<int>st;
//          leftsmaller
        for(auto i=0;i<n;i++){
        while(!st.empty()&& (ans[st.top()])>=(ans[i] )){
            st.pop();
        }
            if(st.empty()){
                leftsmaller.push_back(0);
            }else {
                leftsmaller.push_back(st.top()+1);
            }
        st.push(i);
    }
        while(!st.empty()){
            st.pop();
        }
//         rightsmaller  element
        for(auto i=n-1;i>=0;i--){
            while(!st.empty()&&(ans[st.top()] )>=(ans[i] )){
                st.pop();
                
            }
            if(st.empty()){
                rightsmaller.push_back(n-1);
                
            }else{
                rightsmaller.push_back(st.top()-1);
            }
            st.push(i);
        }
        reverse(rightsmaller.begin(),rightsmaller.end());
        int maxi=0;
        for(auto i=0;i<n;i++){
       maxi=max(maxi,((ans[i])*(rightsmaller[i]-leftsmaller[i]+1)));
        }
        return maxi;
        
    }
    int maximalRectangle(vector<vector<char>>& mat ) {
        int m=mat.size();
        int n=mat[0].size();
      
        vector<int>ans;
        vector<vector<int>>newmat(m,vector<int>(n,0));
//          converting to integer
        for(auto i=0;i<m;i++){
            for(auto j=0;j<n;j++ ){
                newmat[i][j]=(mat[i][j]-'0');
            }
        }
        for(auto i=0;i<n;i++){
            ans.push_back(newmat[0][i]);
        }
        int mx=MAH(ans,n);
        for(auto i=1;i<m;i++){
            for(auto j=0;j<n;j++){
                if(newmat[i][j]==0){
                    ans[j]=0;
                }else{
                    ans[j]=ans[j]+newmat[i][j];
                }
            }
            mx=max(mx,MAH(ans,n));
        }
        return mx;
    }
